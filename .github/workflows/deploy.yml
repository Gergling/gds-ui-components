name: 'Deploy'

on:
  push:
    branches:
      - main

env:
  COVERAGE_DIR: ui-components/coverage
  COVERAGE_FILENAME: coverage-summary.json

jobs:
  tag:
    name: Tag with ui-components/package.json version
    runs-on: ubuntu-22.04
    needs: status
    permissions:
      contents: write
    outputs:
      tag-created: ${{ steps.create_tag.outputs.tag-created }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ui-components

      - name: Create tag
        id: create_tag
        uses: actions/github-script@v8
        with:
          script: |
            const tag = `v${{ steps.package-version.outputs.current-version}}`;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha
              });
              console.log(`Tag ${tag} created successfully.`);
              core.setOutput('tag-created', 'true');
            } catch (err) {
              if (err.status === 422) {
                console.log(`Tag for version "${tag}" already exists. Skipping tag creation.`);
                core.setOutput('tag-created', 'false');
              } else {
                throw err;
              }
            }
          retries: 5
          retry-exempt-status-codes: 400,401,403,404,422
          result-encoding: json
      - name: Echo tag-created
        run: |
          echo "tag-created: ${{ steps.create_tag.outputs.tag-created }}"

  publish:
    name: Publish to NPM
    runs-on: ubuntu-22.04
    needs: tag
    permissions:
      contents: read
      packages: write
    if: needs.tag.outputs.tag-created == 'true'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check package version
        id: cpv
        uses: PostHog/check-package-version@v2
        with:
          path: ui-components

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --ignore-scripts

      - name: Build the library
        run: npx nx run ui-components:build

      - uses: JS-DevTools/npm-publish@v4
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: dist/ui-components
          access: public

  tests:
    name: Run unit tests
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
      - uses: ./.github/actions/setup

      - name: Run unit tests
        run: npx nx run ui-components:test --coverage

      - name: Upload coverage summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: ${{ env.COVERAGE_DIR }}/${{ env.COVERAGE_FILENAME }}

  static:
    name: Run static code checks
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
      - uses: ./.github/actions/setup

      - name: Run type-check
        run: npx nx run ui-components:type-check

      - name: Run linter
        run: npx nx run ui-components:lint

  status:
    name: Update CI status badges
    runs-on: ubuntu-latest
    # This job needs to run after lint and test are complete
    needs: [static, tests]
    # Run even if previous jobs fail, so we can report the failure
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Download coverage summary artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: ${{ env.COVERAGE_DIR }}

      - name: Check for downloaded artifact
        run: ls -al ${{ env.COVERAGE_DIR }}/

      - name: Generate Status JSON
        run: node scripts/generate-status.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit status file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'docs: Update CI status badge [skip ci]'
          file_pattern: 'status/*.json'

  # This job builds the storybook static files and uploads them as an artifact
  build-storybook:
    name: Build Storybook
    runs-on: ubuntu-latest
    # It's good practice to wait for tests to pass before building
    needs: [static, tests]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
      - uses: ./.github/actions/setup

      - name: Build Storybook
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist/storybook/ui-components'

  # This job deploys the artifact to GitHub Pages
  deploy-storybook:
    name: Deploy Storybook
    needs: build-storybook
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
